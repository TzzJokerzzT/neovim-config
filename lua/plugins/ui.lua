-- lualine
local timer = vim.loop.new_timer()
local cached_time = "0m"

local function update_wakatime()
  local handle = io.popen("wakatime --today 2>/dev/null")
  if handle then
    local result = handle:read("*a")
    handle:close()
    if result and result ~= "" then
      cached_time = result:gsub("\n", ""):gsub("hours?", "h"):gsub("minutes?", "m")
    end
  end
end

-- Actualiza cada 5 minutos (300,000 ms)
timer:start(0, 300000, vim.schedule_wrap(update_wakatime))

-- Funci√≥n para lualine
local function wakatime_status()
  return cached_time
end

-- Pomodoro Timer
local pomodoro = require("lib.pomodoro")

-- Setup Pomodoro
pomodoro.setup()

-- Funci√≥n para mostrar el estado del Pomodoro en lualine
local function pomodoro_status()
  return pomodoro.get_status()
end

vim.api.nvim_set_hl(0, "SnacksDashboardHeader", { fg = "#bbc443", bold = true })

return {
  {
    -- Dashboard
    "folke/snacks.nvim",
    opts = {

      dashboard = {
        sections = {
          { section = "header" },
          { icon = "ÔÑú ", title = "Keymaps", section = "keys", indent = 2, padding = 1 },
          { section = "startup" },
        },
        preset = {
          header = [[
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°à‚†Ä‚¢•‚£Ñ‚£Ä‚†à‚†â‚†õ‚°ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ñ‚¢Ä‚†ô‚£ø‚£ø‚£∑‚£∂‚£å‚°ê‚†å‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ø‚†ø‚†ø‚£ø‚£ø‚°ø‚†õ‚†õ‚†ã‚†â‚¢Ä‚†Ä‚†â‚†õ‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚†Å‚†ò‚£ø‚¢ø‚£ø‚£ø‚£ø‚£¶‚£å‚†Ä‚†®‚†ô‚†©‚£≠‚£µ‚£∂‚£∂‚£ø‚£ø‚£∑‚£∂‚†ñ‚¢Ç‚£†‚°¥‚†û‚†õ‚£â‚£â‚£Å‚£Ä‚£Ä‚£Ä‚°â‚†©‚†≠‚¢Å‚£Ä‚†Ä‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚†ò‚£ß‚°ô‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£æ‚†ü‚¢Å‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ç‚°â‚†Ä‚†∫‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚°Ä‚†ò‚£∑‚°ò‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ü‚¢Å‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚°Ä‚†¢‚†ô‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚†Ä‚†ò‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚¢Å‚£¥‚£∂‚£æ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ñ‚¢¶‚£§‚°Ñ‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚†ò‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ø‚°ü‚¢†‚£ø‚£ø‚£ø‚£ø‚†Ä‚†â‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£§‚£Ä‚£Ä‚†Ä‚†â‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚†ò‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†á‚¢æ‚†Å‚£∏‚£ø‚£ø‚£ø‚£ø‚°Ä‚¢¶‚°à‚†ì‚†ä‚†â‚†ô‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚¢õ‚£´‚£¥‚°ø‚†ã‚¢Ä‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ä‚†Ä‚†ô‚¢ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚£¶‚£Ä‚†Ä‚†π‚£ø‚°ç‚¢®‚£•‚£º‚†ø‚†Ç‚†â‚†Ç‚†Ä‚†à‚£ø‚£è‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£æ‚£ø‚†ü‚†ã‚¢Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ó‚†Ä‚†Ä‚†â‚†ª‚¢ø‚£ø‚°Ä‚†∏‚°ç‚†≥‚°Ñ‚£ø‚†É‚£ø‚£ø‚°á‚°Ü‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚†ò‚†ª‚†¶‚†Ñ‚†à‚¢â‚°â‚†õ‚†ã‚†â‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†ã‚†â‚£Ä‚£§‚†∂‚£Ä‚£≠‚†Ä‚†Ä‚†Ä‚†Ä‚¢©‚£Ä‚¢π‚°Ñ‚†Ä‚¢∏‚°à‚£ø‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚£†‚£ø‚£á‚¢†‚£µ‚£∂‚£∂‚†æ‚†ã‚†Ä‚¢†‚†Ä‚¢†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ü‚†â‚¢Ä‚£§‚†∂‚¢õ‚£©‚°¥‚†ü‚†ã‚†ª‚†É‚†Ä‚†Ä‚¢Ä‚£à‚°ô‚†Ä‚†ª‚†ó‚¢∏‚£ß‚†à‚¢ø‚£ø‚£∑‚£§‚£ò‚£õ‚£õ‚£≠‚£º‚£ø‚£ø‚°è‚†Ä‚†Ä‚£º‚†Ç‚¢Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†ã‚¢Ä‚£¥‚†û‚£ã‚£¥‚†û‚¢ã‚°Å‚†∞‚†æ‚†É‚¢Ä‚£†‚£∂‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†Ä‚†ò‚£ø‚°á‚¢∏‚£ø‚£ø‚£Ä‚°à‚†ô‚†ø‚£ø‚£ø‚°è‚£π‚£ß‚£Ñ‚°†‚†Ä‚£Ä‚†Ä‚†ô‚¢õ‚†õ‚£ø‚£ø‚†ø‚†ü‚†ã‚†â‚£Ä‚£Ä‚£§‚£§‚£§‚¢Ä
‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†É‚¢†‚°æ‚¢ã‚£¥‚†û‚¢ã‚£§‚†Ä‚†ª‚†è‚£Ä‚£¥‚£æ‚£ø‚£ø‚£ø‚†ø‚†õ‚£â‚°Å‚£à‚°ô‚†Ç‚¢∞‚£å‚†ª‚†Ä‚†ô‚¢ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£¨‚£Ω‚†ø‚†õ‚†ã‚†Ä‚†ò‚†õ‚†õ‚¢Å‚£†‚£æ‚†ü‚†Å‚†Ä‚£§‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∏
‚£ø‚£ø‚£ø‚£ø‚†ü‚†Ä‚£¥‚†è‚£¥‚†ü‚°Å‚¢∞‚£ø‚°ø‚†Ä‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚†è‚¢†‚£∂‚£ø‚£ø‚°á‚£ø‚°á‚¢†‚£§‚†â‚¢Å‚£§‚£æ‚£§‚°Ä‚†â‚†ô‚†õ‚†â‚†â‚†Å‚£Ä‚£§‚£¥‚£ø‚£∂‚£¥‚£∂‚£ø‚†ü‚†Å‚£†‚°æ‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ã‚£π
‚£ø‚£ø‚£ø‚†è‚†Ä‚£º‚¢ã‚°º‚†Å‚†∏‚£∑‚†à‚†ã‚¢Ä‚£æ‚£ø‚£ø‚£ø‚°ø‚¢ª‚£ü‚†ê‚†Ä‚£ø‚£ø‚£ø‚°á‚£ø‚°á‚†à‚°°‚†Ç‚†Ä‚†ö‚£â‚£â‚†Ä‚°Ñ‚£∂‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Å‚£†‚£æ‚£ø‚†á‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚¢†‚£ø
‚£ø‚£ø‚°ü‚†Ä‚£º‚¢É‚°æ‚¢Å‚°¶‚†Ä‚†õ‚†Å‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£ø‚£ø‚£á‚£Ä‚†∏‚£ø‚£ø‚°á‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚¢≤‚£ø‚£ø‚†π‚£á‚†Ä‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚¢õ‚†Ö‚£†‚£æ‚£ø‚°ø‚¢ã‚£¥‚£¨‚£≠‚£≠‚£õ‚£õ‚†ü‚°Å‚£†‚£ø‚£ø
‚£ø‚£ø‚¢É‚¢∞‚°è‚†ò‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ä‚¢ª‚£ø‚°á‚£ø‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚¢ø‚£ø‚°á‚¢ø‚°Ñ‚†ò‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ã‚†Ä‚£†‚£æ‚£ø‚†ü‚£©‚£∂‚£ø‚£ø‚£ø‚£ø‚†ü‚¢ã‚†Ä‚£®‚£∂‚£ø‚£ø‚£ø
‚£ø‚†ü‚†ò‚†à‚†Ä‚¢Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£á‚†à‚£ø‚£∑‚†∏‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†∏‚£ø‚£ø‚†∏‚£∑‚†Ä‚†∏‚£ø‚£ø‚°ø‚†ã‚¢Ä‚£§‚£æ‚°ø‚¢õ‚£µ‚£æ‚£ø‚£ø‚£ø‚†ø‚†ã‚†Ö‚£ä‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø
‚†ã‚¢Ä‚£æ‚£Ü‚°õ‚†Ä‚†º‚†ø‚†Ä‚†Ä‚†Ä‚£à‚†õ‚†ª‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ü‚¢π‚£ø‚£á‚¢π‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚¢ø‚£ø‚°Ü‚£ø‚†Ä‚¢Ä‚†â‚†ã‚¢Ä‚£¥‚£ø‚†ü‚£´‚£¥‚£ø‚£ø‚£ø‚°ø‚†ã‚†Å‚£Ä‚£µ‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚†Ä‚†ã‚¢â‚£ø‚£è‚††‚†â‚†Ü‚†Ä‚†Ä‚†à‚†õ‚†ø‚†∑‚£∂‚†Ü‚£†‚£å‚°â‚¢â‚°§‚¢Ä‚£§‚°Ä‚¢†‚†Ä‚¢ª‚£ø‚£Ü‚¢ø‚£ø‚°Ä‚†Ä‚†Ä‚†∏‚£ø‚£∑‚†Å‚¢†‚†ü‚†Ä‚£¥‚°ø‚¢õ‚£•‚£æ‚£ø‚£ø‚°ø‚†õ‚†Å‚£†‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£Ñ‚£Ä‚°â‚†â‚†â‚†Å‚†Ä‚†ê‚†æ‚†Ä‚£∂‚£¶‚£§‚£Ñ‚£Ä‚°ö‚†õ‚†õ‚†É‚†∏‚°á‚†ß‚†Ü‚†á‚¢Ä‚£†‚°Ä‚¢ª‚£ø‚°å‚¢ø‚£∑‚°à‚†Ä‚†Ä‚£ø‚°á‚¢∞‚†ò‚°Ä‚°á‚¢ã‚£¥‚£ø‚£ø‚°ø‚†õ‚†Å‚£Ä‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£¶‚£ê‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚°Ä‚†≤‚£¶‚£å‚£â‚£Å‚£¥‚£ø‚£ø‚£ø‚°Ñ‚†π‚£ø‚°å‚†ø‚†ß‚†Ä‚†Ñ‚†à‚¢Ä‚†Ä‚°á‚†Å‚†π‚°å‚†ª‚†õ‚†Å‚£Ä‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚£ø‚£ø‚°ø‚†ü‚¢õ‚°õ‚†õ‚†ø‚†¶‚†Ä‚¢â‚†õ‚†ø‚†ø‚†ø‚£ø‚£ø‚°ø‚†Ü‚†ò‚†ã‚£∞‚£ø‚£ø‚°á‚¢Ä‚†Ä‚†Ä‚†ò‚°Ñ‚¢Ñ‚£â‚£Ñ‚†Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†ê‚†õ‚†Å‚¢§‚£æ‚£ø‚£ø‚°å‚¢ø‚£Ü‚†ê‚†å‚†ª‚†∂‚†∂‚†û‚†õ‚†â‚£§‚£∂‚¢Ç‚†Ä‚¢ø‚°ø‚£ø‚£ß‚†Ä‚†Ä‚†Ç‚†¢‚°à‚†Ä‚†ô‚†É‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°∂‚°Ä‚†Ä‚¢Ä‚£π‚£ø‚£ø‚£ø‚£å‚¢ø‚†Ä‚¢†‚£§‚£§‚£§‚£§‚£¨‚°ì‚¢å‚£Å‚†à‚¢Ä‚†ò‚¢ø‚£ø‚†õ‚†Ä‚†Ä‚†Ä‚¢†‚£∂‚£§‚£§‚£§‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚†Ñ‚£†‚£¶‚†ò‚¢ø‚£ø‚£ø‚†ø‚†ü‚†Ä‚†Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°à‚†Å‚¢à‚£Ä‚†Ä‚†Ä‚†Ç‚†à‚¢∞‚£Ñ‚††‚°π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ê‚¢†‚£è‚†Å‚†Ä‚†Ä‚†â‚°Ä‚†Ñ‚¢Ä‚£†‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£§‚£Ä‚£Ä‚°Ä‚¢Ñ‚†Ä‚†Ä‚†Ä‚†ô‚¢¶‚†Ä‚¢à‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ä‚°Ä‚†Å‚†Ä‚†Ä‚†Ä‚¢Ä‚†≤‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚°Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ë‚°ú‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä   ‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ÄA history it's just about to begins‚†Ä   ‚†Ä‚†Ä‚†Ä ‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä   The Legend of Zelda‚†Äüó°Ô∏è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä   ‚†Ä‚†Ä‚†Ä‚†Ä
]],
        -- stylua: ignore
        ---@type snacks.dashboard.Item[]
        keys = {
        {
            icon = "ÔÄÇ  ",
            key = "f",
            desc = "Find File                                 ",
            action = ":lua Snacks.dashboard.pick('files')",
          },
          {
            icon = "ÔÖõ  ",
            key = "n",
            desc = "New File                                  ",
            action = ":ene | startinsert",
          },
          {
            icon = "ÔÄ¢  ",
            key = "g",
            desc = "Find Text                                 ",
            action = ":lua Snacks.dashboard.pick('live_grep')",
          },
          {
            icon = "ÔÉÖ  ",
            key = "r",
            desc = "Recent Files                              ",
            action = ":lua Snacks.dashboard.pick('oldfiles')",
          },
          {
            icon = "Ôê£  ",
            key = "c",
            desc = "Config                                    ",
            action = ":lua Snacks.dashboard.pick('files', {cwd = vim.fn.stdpath('config')})",
          },
          {
            icon = "Óçà  ",
            key = "s",
            desc = "Restore Session                           ",
            section = "session",
          },
          {
            icon = "Ó™å  ",
            key = "x",
            desc = "Lazy Extras                               ",
            action = ":LazyExtras",
          },
          {
            icon = "Û∞í≤  ",
            key = "l",
            desc = "Lazy                                      ",
            action = ":Lazy",
          },
          {
            icon = "Ôê¶  ",
            key = "q",
            desc = "Quit                                      ",
            action = ":qa",
          },
        },
        },
      },
    },
  },

  {
    -- Lualine
    "nvim-lualine/lualine.nvim",
    event = "VeryLazy", -- Load this plugin on the 'VeryLazy' event
    requires = { "nvim-tree/nvim-web-devicons", opt = true }, -- Optional dependency for icons
    opts = {
      options = {
        theme = "iceberg_dark", -- Set the theme for lualine
        icons_enabled = true, -- Enable icons in the statusline
        section_separators = { left = "ÓÇ¥", right = "ÓÇ∂" },
        component_separators = { left = "ÓÇµ", right = "ÓÇ∑" },
      },
      sections = {
        lualine_a = {
          {
            "mode", -- Display the current mode
            icon = "Û∞ûá", -- Set the icon for the mode
          },
        },
        lualine_x = {
          {
            pomodoro_status,
            icon = "",
            color = function()
              local status = pomodoro.get_status()
              if status:find("WORK") then
                return { fg = "#ff6b6b" } -- Red for work time
              elseif status:find("BREAK") then
                return { fg = "#51cf66" } -- Green for break time
              elseif status:find("STANDBY") then
                return { fg = "#ffd43b" } -- Yellow for standby
              else
                return { fg = "#74c0fc" } -- Blue for idle
              end
            end,
          },
          { wakatime_status, icon = "‚è±Ô∏è" },
          "filetype",
        },
      },
    },
  },

  {
    -- Noice
    "folke/noice.nvim",
    config = function()
      require("noice").setup({
        cmdline = {
          view = "cmdline", -- Use the cmdline view for the command-line
        },
        presets = {
          bottom_search = true, -- Enable bottom search view
          command_palette = true, -- Enable command palette view
          lsp_doc_border = true, -- Enable LSP documentation border
        },
        -- Uncomment the following lines to customize the cmdline popup view
        -- views = {
        --   cmdline_popup = {
        --     filter_options = {},
        --     win_options = {
        --       winhighlight = "NormalFloat:NormalFloat,FloatBorder:FloatBorder",
        --     },
        --   },
        -- },
      })
    end,
  },

  {
    -- Incline
    "b0o/incline.nvim",
    event = "BufReadPre", -- Load this plugin before reading a buffer
    priority = 1200, -- Set the priority for loading this plugin
    config = function()
      require("incline").setup({
        window = {
          margin = { vertical = 0, horizontal = 1 },
          winhighlight = {
            -- Eliminar el fondo de la ventana
            Normal = "", -- Fondo normal
            NormalNC = "", -- Fondo normal para ventanas no actuales
          },
        }, -- Set the window margin
        hide = {
          cursorline = true, -- Hide the incline window when the cursorline is active
        },
        render = function(props)
          local filename = vim.fn.fnamemodify(vim.api.nvim_buf_get_name(props.buf), ":t") -- Get the filename
          if vim.bo[props.buf].modified then
            filename = "[+] " .. filename -- Indicate if the file is modified
          end

          local icon, color = require("nvim-web-devicons").get_icon_color(filename) -- Get the icon and color for the file
          return { { icon, guifg = color }, { " " }, { filename } } -- Return the rendered content
        end,
      })
    end,
  },

  {
    "sphamba/smear-cursor.nvim",
    opts = {
      -- Smear cursor when switching buffers or windows.
      smear_between_buffers = true,

      -- Smear cursor when moving within line or to neighbor lines.
      -- Use `min_horizontal_distance_smear` and `min_vertical_distance_smear` for finer control
      smear_between_neighbor_lines = true,

      -- Draw the smear in buffer space instead of screen space when scrolling
      scroll_buffer_space = true,

      -- Set to `true` if your font supports legacy computing symbols (block unicode symbols).
      -- Smears will blend better on all backgrounds.
      legacy_computing_symbols_support = true,

      -- Smear cursor in insert mode.
      -- See also `vertical_bar_cursor_insert_mode` and `distance_stop_animating_vertical_bar`.
      smear_insert_mode = true,

      transparent_bg_fallback_color = "#303030",

      cursor_color = "#303030",
    },
  },
}
